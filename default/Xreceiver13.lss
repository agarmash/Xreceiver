
Xreceiver13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  000001ce  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003d  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002db  00000000  00000000  0000022b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000152  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000285  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000008e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e5  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000186  00000000  00000000  000009f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  00000b7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a3 36       	cpi	r26, 0x63	; 99
  28:	b1 07       	cpc	r27, r17
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	37 d0       	rcall	.+110    	; 0x9c <main>
  2e:	93 c0       	rjmp	.+294    	; 0x156 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <sendToRFModule>:

char prev;
int i;

void sendToRFModule (unsigned char recieved)
{
  32:	68 2f       	mov	r22, r24
    prev = 0xFF;
    DATA_PORT &= ~(1<<DATA); //��������� 0
  34:	c2 98       	cbi	0x18, 2	; 24
  36:	8f ef       	ldi	r24, 0xFF	; 255
  38:	20 e0       	ldi	r18, 0x00	; 0
  3a:	30 e0       	ldi	r19, 0x00	; 0
  3c:	21 c0       	rjmp	.+66     	; 0x80 <__SREG__+0x41>
    for(i = 0; i < 11; i++)
    {
        while (prev == (CLOCK_PIN & (1<<CLOCK))){} //detects change in clock 
  3e:	86 b3       	in	r24, 0x16	; 22
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	81 70       	andi	r24, 0x01	; 1
  44:	90 70       	andi	r25, 0x00	; 0
  46:	48 17       	cp	r20, r24
  48:	59 07       	cpc	r21, r25
  4a:	c9 f3       	breq	.-14     	; 0x3e <__SP_H__>
        prev = CLOCK_PIN & (1<<CLOCK); // should be after downward edge of clock, so send bit of data now 
  4c:	86 b3       	in	r24, 0x16	; 22
  4e:	81 70       	andi	r24, 0x01	; 1
        if (i < 2)
  50:	22 30       	cpi	r18, 0x02	; 2
  52:	31 05       	cpc	r19, r1
  54:	14 f4       	brge	.+4      	; 0x5a <__SREG__+0x1b>
		{
            DATA_PORT &= ~(1<<DATA); //��������� 0
  56:	c2 98       	cbi	0x18, 2	; 24
  58:	06 c0       	rjmp	.+12     	; 0x66 <__SREG__+0x27>
		}
		else
		{
            if (recieved >> 7)
  5a:	67 ff       	sbrs	r22, 7
  5c:	02 c0       	rjmp	.+4      	; 0x62 <__SREG__+0x23>
			{
			    DATA_PORT |= 1<<DATA; //��������� 1
  5e:	c2 9a       	sbi	0x18, 2	; 24
  60:	01 c0       	rjmp	.+2      	; 0x64 <__SREG__+0x25>
			}
			else
			{
                DATA_PORT &= ~(1<<DATA); //��������� 0
  62:	c2 98       	cbi	0x18, 2	; 24
			}
	    	recieved = recieved << 1;
  64:	66 0f       	add	r22, r22
		}

        while (prev == (CLOCK_PIN & (1<<CLOCK))){} //detects upward edge of clock 
  66:	48 2f       	mov	r20, r24
  68:	50 e0       	ldi	r21, 0x00	; 0
  6a:	86 b3       	in	r24, 0x16	; 22
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	81 70       	andi	r24, 0x01	; 1
  70:	90 70       	andi	r25, 0x00	; 0
  72:	48 17       	cp	r20, r24
  74:	59 07       	cpc	r21, r25
  76:	c9 f3       	breq	.-14     	; 0x6a <__SREG__+0x2b>
        prev = CLOCK_PIN & (1<<CLOCK);
  78:	86 b3       	in	r24, 0x16	; 22
  7a:	81 70       	andi	r24, 0x01	; 1
  7c:	2f 5f       	subi	r18, 0xFF	; 255
  7e:	3f 4f       	sbci	r19, 0xFF	; 255

void sendToRFModule (unsigned char recieved)
{
    prev = 0xFF;
    DATA_PORT &= ~(1<<DATA); //��������� 0
    for(i = 0; i < 11; i++)
  80:	2b 30       	cpi	r18, 0x0B	; 11
  82:	31 05       	cpc	r19, r1
  84:	1c f4       	brge	.+6      	; 0x8c <__SREG__+0x4d>
    {
        while (prev == (CLOCK_PIN & (1<<CLOCK))){} //detects change in clock 
  86:	48 2f       	mov	r20, r24
  88:	50 e0       	ldi	r21, 0x00	; 0
  8a:	d9 cf       	rjmp	.-78     	; 0x3e <__SP_H__>
  8c:	80 93 62 00 	sts	0x0062, r24
  90:	30 93 61 00 	sts	0x0061, r19
  94:	20 93 60 00 	sts	0x0060, r18
		}

        while (prev == (CLOCK_PIN & (1<<CLOCK))){} //detects upward edge of clock 
        prev = CLOCK_PIN & (1<<CLOCK);
    }
    DATA_PORT |= 1<<DATA; //��������� 1
  98:	c2 9a       	sbi	0x18, 2	; 24
}
  9a:	08 95       	ret

0000009c <main>:

int main(void)
{
  9c:	cf 92       	push	r12
  9e:	df 92       	push	r13
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29

    DATA_DDR |= 1<<DATA;   //gpio init
  ac:	ba 9a       	sbi	0x17, 2	; 23
    CLOCK_DDR &= ~(1<<CLOCK); //gpio init
  ae:	b8 98       	cbi	0x17, 0	; 23
	SYNC_DDR &= ~(1<<SYNC); //gpio init
  b0:	b9 98       	cbi	0x17, 1	; 23


    DATA_PORT |= 1<<DATA; //��������� 1
  b2:	c2 9a       	sbi	0x18, 2	; 24
  b4:	88 eb       	ldi	r24, 0xB8	; 184
  b6:	98 e8       	ldi	r25, 0x88	; 136
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b8:	29 e1       	ldi	r18, 0x19	; 25
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <__stack+0x1f>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c4:	d9 f7       	brne	.-10     	; 0xbc <__stack+0x1d>

    _delay_ms(3500);

	sendToRFModule(0x84);
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	b4 df       	rcall	.-152    	; 0x32 <sendToRFModule>
  ca:	94 ef       	ldi	r25, 0xF4	; 244
  cc:	c9 2e       	mov	r12, r25
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	d9 2e       	mov	r13, r25
	int timer;
	int flag;

	while(1)
	{
        if ((SYNC_PIN & (1<<SYNC)) == 0)
  d2:	89 e1       	ldi	r24, 0x19	; 25
  d4:	e8 2e       	mov	r14, r24
  d6:	f1 2c       	mov	r15, r1
  d8:	08 ee       	ldi	r16, 0xE8	; 232
  da:	13 e0       	ldi	r17, 0x03	; 3
  dc:	b1 99       	sbic	0x16, 1	; 22
  de:	fe cf       	rjmp	.-4      	; 0xdc <__stack+0x3d>
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d0 e0       	ldi	r29, 0x00	; 0
		{
		    flag = 1;

            for (timer = 0; (timer < 400) && (flag); timer++)
			{
			   if (SYNC_PIN & (1<<SYNC))
  e4:	b1 99       	sbic	0x16, 1	; 22
  e6:	03 c0       	rjmp	.+6      	; 0xee <__stack+0x4f>
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <__stack+0x57>
			   {
                   sendToRFModule(0x04);
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	a0 df       	rcall	.-192    	; 0x32 <sendToRFModule>
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	c6 01       	movw	r24, r12
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <__stack+0x59>
	{
        if ((SYNC_PIN & (1<<SYNC)) == 0)
		{
		    flag = 1;

            for (timer = 0; (timer < 400) && (flag); timer++)
  fc:	21 96       	adiw	r28, 0x01	; 1
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	c0 39       	cpi	r28, 0x90	; 144
 102:	d8 07       	cpc	r29, r24
 104:	19 f0       	breq	.+6      	; 0x10c <__stack+0x6d>
 106:	23 2b       	or	r18, r19
 108:	69 f7       	brne	.-38     	; 0xe4 <__stack+0x45>
 10a:	1c c0       	rjmp	.+56     	; 0x144 <__stack+0xa5>
                   sendToRFModule(0x04);
				   flag = 0;
			   }
               _delay_ms(2);
			}
			if (flag)
 10c:	23 2b       	or	r18, r19
 10e:	d1 f0       	breq	.+52     	; 0x144 <__stack+0xa5>
			{
                sendToRFModule(0xA9);
 110:	89 ea       	ldi	r24, 0xA9	; 169
 112:	8f df       	rcall	.-226    	; 0x32 <sendToRFModule>
 114:	c8 01       	movw	r24, r16
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <__stack+0x77>
				_delay_ms(4);
				sendToRFModule(0xB6);
 11a:	86 eb       	ldi	r24, 0xB6	; 182
 11c:	8a df       	rcall	.-236    	; 0x32 <sendToRFModule>
 11e:	c8 01       	movw	r24, r16
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <__stack+0x81>
				_delay_ms(4);
				sendToRFModule(0x09);
 124:	89 e0       	ldi	r24, 0x09	; 9
 126:	85 df       	rcall	.-246    	; 0x32 <sendToRFModule>
 128:	88 e8       	ldi	r24, 0x88	; 136
 12a:	93 e1       	ldi	r25, 0x13	; 19
 12c:	f7 01       	movw	r30, r14
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <__stack+0x8f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 132:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 134:	d9 f7       	brne	.-10     	; 0x12c <__stack+0x8d>
				_delay_ms(500);
                sendToRFModule(0xA0);
 136:	80 ea       	ldi	r24, 0xA0	; 160
 138:	7c df       	rcall	.-264    	; 0x32 <sendToRFModule>
 13a:	c8 01       	movw	r24, r16
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <__stack+0x9d>
				_delay_ms(4);
				sendToRFModule(0xB0);
 140:	80 eb       	ldi	r24, 0xB0	; 176
 142:	77 df       	rcall	.-274    	; 0x32 <sendToRFModule>
 144:	80 e2       	ldi	r24, 0x20	; 32
 146:	9e e4       	ldi	r25, 0x4E	; 78
 148:	f7 01       	movw	r30, r14
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <__stack+0xab>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 150:	09 f4       	brne	.+2      	; 0x154 <__stack+0xb5>
 152:	c4 cf       	rjmp	.-120    	; 0xdc <__stack+0x3d>
 154:	f9 cf       	rjmp	.-14     	; 0x148 <__stack+0xa9>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
